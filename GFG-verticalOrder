class Pair{
    int hd;
    Node node;
    Pair(int hd, Node node){
        this.hd = hd;
        this.node = node;
    }
}
class Solution {
    static ArrayList<ArrayList<Integer>> verticalOrder(Node root) {
        // add your code here
        ArrayList<ArrayList<Integer>> result= new ArrayList<>();
        if(root == null){
            return result;
        }
        Map<Integer, ArrayList<Integer>> map =new TreeMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(0, root));
        while(!queue.isEmpty()){
            Pair pair = queue.poll();
            int hd = pair.hd;
            Node node = pair.node;
            if(map.containsKey(hd)){
                ArrayList<Integer> oldList = map.get(hd);
                oldList.add(node.data);
                map.put(hd, oldList);
            }
            else{
                ArrayList<Integer> list = new ArrayList<>();
                list.add(node.data);
                map.put(hd, list);
            }
            if(node.left!=null){
                queue.add(new Pair(hd-1, node.left));
            }
            if(node.right!=null){
                queue.add(new Pair(hd+1, node.right));
            }
        }
        // Map to List convert
        for(Map.Entry<Integer, ArrayList<Integer>> m : map.entrySet()){
            result.add(m.getValue());
        }
        return result;
    }
}
