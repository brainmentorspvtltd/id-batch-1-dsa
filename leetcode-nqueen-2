class Solution {
    boolean board[][] ;
    public int totalNQueens(int n) {
        board = new boolean[n][n]; // fill with false
    }

    boolean isNotInAboveRow(int row, int col){
        for(int i = row; i>=0; i--){
            if(board[i][col]){
                    // Queen is Present
                return false;

        }
        return true;
    }

    boolean isNotInLeftDiagonal(int row, int col){
        for(int i = row, j = col; i>=0 && j>=0; i--, j--)
            if(board[i][j]){
            // Queen is Present
        return false;
        }
        }
        return true;
    }

     boolean isNotInRightDiagonal(int row, int col){
        for(int i = row, j = col; i>=0 &&j<board[0].length; i--, j++){
            if(board[i][j]){
            // Queen is Present
            return false;
        }
    }
        return true;
    }

    boolean canIPlaceAQueen(int row, int col){
        return isNotInAboveRow(row, col) && isNotInLeftDiagonal(row, col) && isNotInRightDiagonal(row, col);
        // 1. Above Row - There is Queen or Not
// 2. Left Diagonal - There is Queen or Not
// 3. Right Diagonal - There is Queen or Not
    }
    int helper(int row , int n){
        if(row == n){
            return 1;
        }
        int count = 0;
        // Move in a current row and each column
        for(int col = 0; col<n ; col++){
            if(canIPlaceAQueen(row, col)){
                board[row][col] = true; 
                count = count + helper(row + 1, n);
                // BackTrack
                board[row][col] = false; 
            }
        }
        return count;
    }

}
